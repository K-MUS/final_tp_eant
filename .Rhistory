selectInput("i_department", "Department",
choices = list("Human Resources" = "Human Resources",
"Research & Development" = "Research & Development",
"Sales" = "Sales"),
selected = 3),
#Distance from home
sliderInput("i_distance", "Distance from home", min = 1, max = 30, value = 15),
#Education
selectInput("i_education", "Education",
choices = list("Below College" = 1,
"College"  = 2,
"Bachelor" = 3,
"Master"   = 4,
"Doctor"   = 5),
selected = 3),
#EnviromentSatisfaction
selectInput("i_env_satisfaction", "Enviroment Satisfaction",
choices = list("Low" = 1,
"Medium"  = 2,
"High" = 3,
"Very High"   = 4),
selected = 2),
#Gender
selectInput("i_gender", "Gender",
choices = list("Female" = "Female",
"Male"  = "Male"),
selected = 2),
#NumCompanyWorked
sliderInput("i_companyworked", "No Company Worked", min = 1, max = 10, value = 2),
#TotalWorkingYears
sliderInput("i_totalyworked", "Total Working Years", min = 0, max = 40, value = 18),
#Training
sliderInput("i_training", "Training Times Last Year", min = 0, max = 10, value = 2),
radioButtons("r_model", label = h3("Choose Model"),
choices = list("Decision Tree" = 1, "Random Forest" = 2),
selected = 1),
),
shinydashboard::box(width = NULL,align="center",
actionButton("predict", label = "Predict"),
)
),
column(width = 3,
verbatimTextOutput("case")
# verbatimTextOutput("model")
),
shinydashboard::valueBoxOutput("PredictBox", width = 3),
)
)
#------------------------------------------------------------
# Datos
#------------------------------------------------------------
tab_datos <- shinydashboard::tabItem(tabName = "datos",
fluidRow(
# column(
shinydashboard::box(
title = "Data", width = 12, status = "primary", solidHeader = TRUE,
DT::DTOutput("original_datos2")
)
# ,width=12)
),
p("Education"),
tags$ul(
tags$li("1 'Below College'"),
tags$li("2 'College'"),
tags$li("3 'Bachelor'"),
tags$li("4 'Master'"),
tags$li("5 'Doctor'"),
),
p(" "),
p("EnvironmentSatisfaction"),
tags$ul(
tags$li("1 'Low'"),
tags$li("2 'Medium'"),
tags$li("3 'High'"),
tags$li("4 'Very High'"),
),
p(" "),
p("JobSatisfaction"),
tags$ul(
tags$li("1 'Low'"),
tags$li("2 'Medium'"),
tags$li("3 'High'"),
tags$li("4 'Very High'"),
)
)
sidebar <- shinydashboard::dashboardSidebar(
shinydashboard::sidebarMenu(
shinydashboard::menuItem("Introduction", tabName = "intro",icon=icon("file-alt")),
shinydashboard::menuItem("EDA", tabName = "eda",icon = icon("chart-bar")),
shinydashboard::menuItem("Models", tabName = "model",icon = icon("tree")),
shinydashboard::menuSubItem("Decision Tree", tabName = "model_dt",icon = icon("none")),
shinydashboard::menuSubItem("Random Forest", tabName = "model_rf",icon = icon("none")),
shinydashboard::menuItem("Predict", tabName = "predict",icon = icon('dashboard')),
shinydashboard::menuItem("DataSet", tabName = "datos",icon=icon("database"))
)
)
#------------------------------------------------------------
#Body
#------------------------------------------------------------
body <- shinydashboard::dashboardBody(
tags$style(HTML("
.box.box-solid.box-primary>.box-header {
color:#fff;
background:#00699B
}
.box.box-solid.box-primary{
border-bottom-color:#00699B;
border-left-color:#00699B;
border-right-color:#00699B;
border-top-color:#00699B;
}
.box.box-solid.box-success>.box-header {
color:#fff;
background:#3D9970
}
.box.box-solid.box-success{
border-bottom-color:#3D9970;
border-left-color:#3D9970;
border-right-color:#3D9970;
border-top-color:#3D9970;
}
.box.box-solid.box-info>.box-header {
color:#fff;
background:#001F3F
}
.box.box-solid.box-info{
border-bottom-color:#001F3F;
border-left-color:#001F3F;
border-right-color:#001F3F;
border-top-color:#001F3F;
}
")),
shinydashboard::tabItems(
tab_intro,
tab_eda,
tab_model,
tab_model_dt,
tab_model_rf,
tab_predict,
tab_datos
)
)
#------------------------------------------------------------
# Shiny - UI
#------------------------------------------------------------
ui <- shinydashboard::dashboardPage(skin = c("blue"),
shinydashboard::dashboardHeader(title = "Attrition Analysis"),
sidebar,
body
)
server <- shinyServer(function(input, output) {
output$box_eda_selected <- renderText({
input$box_eda
})
#------------------------------------------------------------
# General
#------------------------------------------------------------
data_table <- reactive({
df_num
})
df_table <- reactive({
df
})
eda_attr_attr <- reactive({
eda_attr_attr
})
#------------------------------------------------------------
# EDA - Correlation
#------------------------------------------------------------
output$eda_corr_plot <- renderPlot({
corrplot::corrplot(cor(data_table()), method="circle", tl.col="#3982B7",type="full")
}, height = 600 #, width =510
)
output$corr_clicked <- reactive({
result <- ifelse(is.null(input$eda_corr_plot_click$x), FALSE, TRUE)
return(result)
})
output$eda_corr_click_info <- renderPlot({
x_column <- ifelse(is.null(input$eda_corr_plot_click$x), ncol(data_table()), round(input$eda_corr_plot_click$x))
y_column <- ifelse(is.null(input$eda_corr_plot_click$y), 1, round(input$eda_corr_plot_click$y))
n_columns <- ncol(data_table())+1
df_sub <- data_table()
if( x_column <= ncol(data_table() ) & y_column <= ncol(data_table()) & x_column > 0 & y_column > 0 ){
if(colnames(df_sub)[n_columns - y_column] == "Attrition"){
ggplot2::ggplot(df_sub, ggplot2::aes_string(colnames(df_sub)[x_column])) +
ggplot2::geom_density(alpha = 0.25, ggplot2::aes(fill = factor(Attrition))) +
ggplot2::guides(fill=ggplot2::guide_legend(title="Attrition:")) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::scale_fill_manual(values=c("#eb5e28", "#006494"))
} else if(colnames(df_sub)[x_column] == "Attrition"){
ggplot2::ggplot(df_sub, ggplot2::aes_string(colnames(df_sub)[n_columns-y_column])) +
ggplot2::geom_density(alpha = 0.25, ggplot2::aes(fill = factor(Attrition))) +
ggplot2::guides(fill=ggplot2::guide_legend(title="Attrition:")) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::scale_fill_manual(values=c("#eb5e28", "#006494"))
} else if(colnames(df_sub)[x_column] != colnames(df_sub)[n_columns-y_column]) {
x_name = colnames(df_sub)[x_column]
y_name = colnames(df_sub)[n_columns-y_column]
ggplot2::ggplot(df_sub, ggplot2::aes_string(x_name, y_name) ) + ggplot2::stat_bin2d() + ggplot2::theme_bw()
} else {
ggplot2::ggplot(df_sub, ggplot2::aes_string("factor(Attrition)", colnames(df_sub)[x_column])) +
ggplot2::geom_violin(alpha = 0.2, ggplot2::aes(fill = factor(Attrition))) + ggplot2::theme_bw() +
ggplot2::scale_fill_manual(values=c("#eb5e28", "#006494")) +
ggplot2::guides(fill=FALSE) + ggplot2::xlab("Attrition") +
ggplot2::theme(legend.position = "bottom")
}
}
}, height = 320)
#------------------------------------------------------------
# EDA - Attrition
#------------------------------------------------------------
# Attrition Bars
output$eda_attr_attr <- renderPlot({
df_table() %>% group_by(Attrition) %>% summarise(Count=n()) %>%
ggplot2::ggplot(ggplot2::aes(x=Attrition, y=Count)) +
ggplot2::geom_bar(stat="identity", fill="#7fc8f8") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values=c("#B5EAD7", "#FF9AA2")) +
ggplot2::scale_color_manual(values=c("#B5EAD7","#FF9AA2")) +
ggplot2::geom_label(ggplot2::aes(label=Count, fill = Attrition), colour = "Black", fontface = "bold") +
ggplot2::labs(x="Employee Attrition",y="Amount") +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition - Education Level
output$eda_attr_edu_level <- renderPlot({
df_tmp <- df_table()
# Give names for the different education levels.
df_tmp$Educational_Levels <-  ifelse(df$Education == 1, "Without College D.",
ifelse(df$Education == 2 , "College D.",
ifelse(df$Education == 3, "Bachelors D.",
ifelse(df$Education == 4, "Masters D.", "Phd D."))))
df_tmp <- df_tmp %>% select(Educational_Levels, Attrition) %>% group_by(Educational_Levels, Attrition) %>%
summarize(n=n())# %>%
ggplot2::ggplot(df_tmp, ggplot2::aes(x=forcats::fct_reorder(Educational_Levels,n), y=n, fill=Attrition, color=Attrition)) + ggplot2::geom_bar(stat="identity") +
ggplot2::facet_wrap(~Attrition) +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values=c("#B5EAD7", "#FF9AA2")) +
ggplot2::scale_color_manual(values=c("#B5EAD7","#FF9AA2")) +
ggplot2::geom_label(ggplot2::aes(label=n, fill = Attrition), colour = "Black", fontface = "bold") +
ggplot2::labs(x="", y="Number of Employees") +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition - Job Satisfaction
output$eda_attr_job <- renderPlot({
df_tmp <- df_table()
df_tmp$JobSatisfaction <-  ifelse(df$JobSatisfaction == 1, "Low",
ifelse(df$JobSatisfaction == 2 , "Medium",
ifelse(df$JobSatisfaction == 3, "High",
ifelse(df$JobSatisfaction == 4, "Very High",""))))
df_tmp %>% select(JobSatisfaction, Attrition) %>% group_by(JobSatisfaction, Attrition) %>%
summarize(n=n()) %>%
ggplot2::ggplot( ggplot2::aes(x=forcats::fct_reorder(JobSatisfaction, n, .desc = FALSE ), y=n, fill=Attrition, color=Attrition)) + ggplot2::geom_bar(stat="identity") +
ggplot2::facet_wrap(~Attrition) +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values=c("#B5EAD7", "#FF9AA2")) +
ggplot2::scale_color_manual(values=c("#B5EAD7","#FF9AA2")) +
ggplot2::geom_label(ggplot2::aes(label=n, fill = Attrition), colour = "Black", fontface = "bold") +
ggplot2::labs(x="", y="Number of Employees") +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition Age
output$eda_attr_age <- renderPlot({
ggplot2::ggplot(df_table(), ggplot2::aes(x=Attrition, y=Age, color=Attrition, fill=Attrition)) +
ggplot2::geom_boxplot() +
ggplot2::scale_fill_manual(values=c("#fdc5f5", "#59a5d8")) +
ggplot2::scale_color_manual(values=c("#f7aef8", "#386fa4")) +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition Monthly Income
output$eda_attr_income <- renderPlot({
ggplot2::ggplot(df_table(), ggplot2::aes(x=Attrition, y=MonthlyIncome, color=Attrition, fill=Attrition)) +
ggplot2::geom_boxplot() +
ggplot2::scale_fill_manual(values=c("#fdc5f5", "#59a5d8")) +
ggplot2::scale_color_manual(values=c("#f7aef8", "#386fa4")) +
#coord_flip() +
#labs(title="Are there any Gender Disparities in Income?") +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition Distance from Home
output$eda_attr_distance <- renderPlot({
ggplot2::ggplot(df_table(), ggplot2::aes(x=Attrition, y=DistanceFromHome, color=Attrition, fill=Attrition)) +
ggplot2::geom_boxplot() +
ggplot2::scale_fill_manual(values=c("#fdc5f5", "#59a5d8")) +
ggplot2::scale_color_manual(values=c("#f7aef8", "#386fa4")) +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# Attrition Years same Manager
output$eda_attr_manager <- renderPlot({
ggplot2::ggplot(df_table(), ggplot2::aes(x=Attrition, y=YearsWithCurrManager, color=Attrition, fill=Attrition)) +
ggplot2::geom_boxplot() +
ggplot2::scale_fill_manual(values=c("#fdc5f5", "#59a5d8")) +
ggplot2::scale_color_manual(values=c("#f7aef8", "#386fa4")) +
ggthemes::theme_few() +
ggplot2::theme(legend.position="none")
})
# # Monthly Gender
# output$eda_monthly_gender <- renderPlot({
#     ggplot(df_table(), aes(x=Gender, y=MonthlyIncome, color=Gender, fill=Gender)) +
#         geom_boxplot() +
#         scale_fill_manual(values=c("#fdc5f5", "#59a5d8")) +
#         scale_color_manual(values=c("#f7aef8", "#386fa4")) +
#         theme_few() +
#         theme(legend.position="none")
# })
#
# # Monthly Job satisfaction
# output$eda_monthly_job <- renderPlot({
#     df_tmp <- df_table()
#
#     df_tmp$JobSatisfaction <-  ifelse(df$JobSatisfaction == 1, "Low",
#                                       ifelse(df$JobSatisfaction == 2 , "Medium",
#                                              ifelse(df$JobSatisfaction == 3, "High",
#                                                     ifelse(df$JobSatisfaction == 4, "Very High",""))))
#
#     df_tmp <- df_tmp %>% select(JobSatisfaction, MonthlyIncome, Attrition) %>% group_by(JobSatisfaction, Attrition) %>%
#         summarize(med=median(MonthlyIncome))
#
#     ggplot(df_tmp, aes(x=fct_reorder(JobSatisfaction, -med), y=med, color=Attrition)) +
#         geom_point(size=5) +
#         geom_line(size=3) +
#         geom_segment(aes(x=JobSatisfaction,
#                          xend=JobSatisfaction,
#                          y=0,
#                          yend=med)) +
#         facet_wrap(~Attrition) +
#         labs(y="Median Income", x="Level of Job Satisfaction") +
#         coord_flip() +
#         scale_color_manual(values=c("#58FA58", "#FA5858")) +
#         geom_text(aes(x=JobSatisfaction, y=0.01, label= paste0("$ ", round(med,2))),
#                   hjust=-0.5, vjust=-0.5, size=4,
#                   colour="black", fontface="italic",
#                   angle=360) +
#         theme_few()
# })
#------------------------------------------------------------
# Model
#------------------------------------------------------------
output$conf_mat_info <- renderPrint({
caret::confusionMatrix(conf_mat,test$Attrition)
})
output$roc_dt <- renderPlot({
pROC::roc(response = test$Attrition, predictor = predict_dt,plot=TRUE, legacy.axes = TRUE, percent = TRUE, xlab= "False Positive Perc.", ylab= "True Positive Perc.",
col="#377EB8",lwd=4, print.auc=TRUE)
})
output$conf_mat_info_dt <- renderPrint({
caret::confusionMatrix(conf_mat_dt,test$Attrition)
})
output$imp_var_dt <- renderPlot({
ggplot2::ggplot(feature_importance, ggplot2::aes(x=reorder(features, importance), y=importance, fill=features)) +
ggplot2::geom_bar(stat='identity') +
ggplot2::coord_flip() +
ggplot2::geom_label(ggplot2::aes(label=paste0(importance, "%")), colour = "white", fontface = "italic", hjust=0.6) +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position="none")
})
output$roc_rf <- renderPlot({
pROC::roc(response = test$Attrition, predictor = predict_rf,plot=TRUE, legacy.axes = TRUE, percent = TRUE, xlab= "False Positive Perc.", ylab= "True Positive Perc.",
col="#377EB8",lwd=4, print.auc=TRUE)
})
output$conf_mat_info_rf <- renderPrint({
caret::confusionMatrix(conf_mat_rf,test$Attrition)
})
output$imp_var_rf <- renderPlot({
randomForest::varImpPlot(model_rf)
})
#------------------------------------------------------------
# Predict
#------------------------------------------------------------
pred_case <- reactive({
Age                   = as.integer(input$i_age)
BusinessTravel        = as.factor(input$i_travel)
Department            = as.factor(input$i_department)
DistanceFromHome      = as.integer(input$i_distance)
Education             = as.integer(input$i_education)
EnvironmentSatisfaction = as.integer(input$i_env_satisfaction)
Gender                = as.factor(input$i_gender)
JobRole               = as.factor(input$i_role)
JobSatisfaction       = as.integer(input$i_job_satisfaction)
MonthlyIncome         = as.integer(input$i_monthly_income)
NumCompaniesWorked    = as.integer(input$i_companyworked)
OverTime              = as.factor(input$i_overtime)
StockOptionLevel      = as.integer(input$i_stock)
TotalWorkingYears     = as.integer(input$i_totalyworked)
TrainingTimesLastYear = as.integer(input$i_training)
YearsAtCompany        = as.integer(input$i_years_company)
YearsInCurrentRole    = as.integer(input$i_years_role)
YearsWithCurrManager  = as.integer(input$i_years_manager)
test <- data.frame(Age,
BusinessTravel,
Department,
DistanceFromHome,
Education,
EnvironmentSatisfaction,
Gender,
JobRole,
JobSatisfaction,
MonthlyIncome,
NumCompaniesWorked,
OverTime,
StockOptionLevel,
TotalWorkingYears,
TrainingTimesLastYear,
YearsAtCompany,
YearsInCurrentRole,
YearsWithCurrManager)
test
})
# model_choosed <- reactive({
#   if (input$m_model == 1) {
#     return(model_dt)
#   } else {
#     return(model_rf)
#   }
# }
# )
pred_result_prob <-  eventReactive(input$predict, {
# if (input$m_model == 1) {
#   model_choosed = model_dt
# } else {
#   model_choosed = model_rf
# }
pred <- predict(model_dt, newdata = pred_case(), type = "prob")
})
pred_result_class <-  eventReactive(input$predict, {
pred <- predict(model_dt, newdata = pred_case(), type = "class")
})
output$case <- renderText({
text <- paste(" Age:", pred_case()[1,1], "\n",
"Business Travel:", pred_case()[1,2],"\n",
"Department:", pred_case()[1,3],"\n",
"Distance From Home:", pred_case()[1,4],"\n",
"Education:", pred_case()[1,5],"\n",
"Enviroment Satisfaction:", pred_case()[1,6],"\n",
"Gender:", pred_case()[1,7],"\n",
"Job Role:", pred_case()[1,8],"\n",
"Job Satisfaction", pred_case()[1,9],"\n",
"Monthly Income:", pred_case()[1,10],"\n",
"No Company Worked:", pred_case()[1,11],"\n",
"Overtime:", pred_case()[1,12],"\n",
"Stock Option Level:", pred_case()[1,13],"\n",
"Total Working Years:", pred_case()[1,14],"\n",
"Training in Last Year:", pred_case()[1,15],"\n",
"Years at Company:", pred_case()[1,16],"\n",
"Years in Current Role:", pred_case()[1,17],"\n",
"Years with Current Manager:", pred_case()[1,18],"\n"
)
})
output$PredictBox <- shinydashboard::renderValueBox({
if(pred_result_class()=="No"){
shinydashboard::valueBox(
pred_result_class(), pred_result_prob()[pred_result_class()], icon = icon("thumbs-up", lib = "glyphicon"),color = "green"
)
}
else{
shinydashboard::valueBox(
pred_result_class(), pred_result_prob()[pred_result_class()], icon = icon("thumbs-down", lib = "glyphicon"),color = "red"
)
}
})
#------------------------------------------------------------
# Data
#------------------------------------------------------------
output$original_datos = DT::renderDataTable({
df_num
})
output$original_datos2 = DT::renderDT(
data_table(), options = list(autoWidth = TRUE,scrollX=TRUE)
)
outputOptions(output, "corr_clicked", suspendWhenHidden = FALSE)
}
)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.01))
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.001))
model_dt
View(model_dt)
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.01))
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.001))
summary(model_dt)
runApp()
runApp()
runApp()
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.01))
#model_dt <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.001))
model_dt
rpart.plot(model_dt)
library(RColorBrewer)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model_dt)
prp(model_dt)
runApp()
runApp()
shiny::runApp()
View(df)
runApp()
shiny::runApp()
shiny::runApp()
